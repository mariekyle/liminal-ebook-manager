version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: ebook-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ebooks}
      POSTGRES_USER: ${POSTGRES_USER:-ebook_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ebook-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ebook_user}"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: ebook-redis
    networks:
      - ebook-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ebook-backend
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-ebook_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-ebooks}
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:3000,http://10.0.0.163:3000}
      - UPLOAD_MAX_SIZE=${UPLOAD_MAX_SIZE:-100MB}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - ebook_storage:/app/uploads
    networks:
      - ebook-network
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=${REACT_APP_API_URL}
    container_name: ebook-frontend
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://10.0.0.163:8000}
      - REACT_APP_VERSION=${APP_VERSION:-1.0.0}
    networks:
      - ebook-network
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  ebook_storage:
    driver: local

networks:
  ebook-network:
    driver: bridge