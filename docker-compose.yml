version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: ebook-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ebooks}
      POSTGRES_USER: ${POSTGRES_USER:-ebook_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ebook-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ebook_user}"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: ebook-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
    networks:
      - ebook-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ebook-backend
    environment:
      # Environment
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-false}
      TESTING: ${TESTING:-false}
      
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-ebook_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-ebooks}
      DB_POOL_SIZE: ${DB_POOL_SIZE:-10}
      DB_MAX_OVERFLOW: ${DB_MAX_OVERFLOW:-20}
      DB_POOL_TIMEOUT: ${DB_POOL_TIMEOUT:-30}
      DB_POOL_RECYCLE: ${DB_POOL_RECYCLE:-3600}
      
      # Security
      SECRET_KEY: ${SECRET_KEY}
      JWT_ALGORITHM: ${JWT_ALGORITHM:-HS256}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      REFRESH_TOKEN_EXPIRE_DAYS: ${REFRESH_TOKEN_EXPIRE_DAYS:-7}
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-12}
      
      # CORS
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:3000,http://10.0.0.163:3000}
      
      # File Upload
      UPLOAD_MAX_SIZE: ${UPLOAD_MAX_SIZE:-100MB}
      ALLOWED_FILE_EXTENSIONS: ${ALLOWED_FILE_EXTENSIONS:-.epub}
      UPLOAD_DIR: ${UPLOAD_DIR:-uploads}
      TEMP_DIR: ${TEMP_DIR:-temp}
      ENABLE_COMPRESSION: ${ENABLE_COMPRESSION:-true}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FILE_PATH: ${LOG_FILE_PATH:-}
      LOG_MAX_SIZE: ${LOG_MAX_SIZE:-10MB}
      LOG_BACKUP_COUNT: ${LOG_BACKUP_COUNT:-5}
      
      # Redis
      REDIS_URL: redis://redis:6379
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      REDIS_DB: ${REDIS_DB:-0}
      REDIS_MAX_CONNECTIONS: ${REDIS_MAX_CONNECTIONS:-10}
      
      # Cache
      CACHE_ENABLED: ${CACHE_ENABLED:-true}
      CACHE_DEFAULT_TTL: ${CACHE_DEFAULT_TTL:-3600}
      CACHE_MAX_SIZE: ${CACHE_MAX_SIZE:-1000}
      CACHE_STRATEGY: ${CACHE_STRATEGY:-lru}
      
      # API
      APP_TITLE: ${APP_TITLE:-Liminal eBook Manager}
      APP_VERSION: ${APP_VERSION:-1.0.0}
      APP_DESCRIPTION: ${APP_DESCRIPTION:-A modern ebook management system}
      API_DOCS_URL: ${API_DOCS_URL:-/docs}
      API_REDOC_URL: ${API_REDOC_URL:-/redoc}
      API_OPENAPI_URL: ${API_OPENAPI_URL:-/openapi.json}
      HOST: ${HOST:-0.0.0.0}
      PORT: ${PORT:-8000}
      WORKERS: ${WORKERS:-1}
    volumes:
      - ebook_storage:/app/uploads
      - ebook_temp:/app/temp
      - ./logs:/app/logs
    networks:
      - ebook-network
    ports:
      - "${PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=${REACT_APP_API_URL}
        - REACT_APP_VERSION=${REACT_APP_VERSION}
        - REACT_APP_NAME=${REACT_APP_NAME}
        - REACT_APP_DESCRIPTION=${REACT_APP_DESCRIPTION}
        - REACT_APP_ENABLE_NOTIFICATIONS=${REACT_APP_ENABLE_NOTIFICATIONS}
        - REACT_APP_ENABLE_DEBUG=${REACT_APP_ENABLE_DEBUG}
        - REACT_APP_DEFAULT_THEME=${REACT_APP_DEFAULT_THEME}
        - REACT_APP_ENABLE_SYSTEM_THEME=${REACT_APP_ENABLE_SYSTEM_THEME}
        - REACT_APP_DEFAULT_PAGE_SIZE=${REACT_APP_DEFAULT_PAGE_SIZE}
        - REACT_APP_MAX_PAGE_SIZE=${REACT_APP_MAX_PAGE_SIZE}
        - REACT_APP_SEARCH_DEBOUNCE=${REACT_APP_SEARCH_DEBOUNCE}
        - REACT_APP_MIN_QUERY_LENGTH=${REACT_APP_MIN_QUERY_LENGTH}
        - REACT_APP_MAX_FILE_SIZE=${REACT_APP_MAX_FILE_SIZE}
        - REACT_APP_ALLOWED_FILE_TYPES=${REACT_APP_ALLOWED_FILE_TYPES}
        - REACT_APP_ENABLE_DRAG_DROP=${REACT_APP_ENABLE_DRAG_DROP}
        - REACT_APP_CACHE_ENABLED=${REACT_APP_CACHE_ENABLED}
        - REACT_APP_CACHE_TTL=${REACT_APP_CACHE_TTL}
        - REACT_APP_CACHE_MAX_SIZE=${REACT_APP_CACHE_MAX_SIZE}
        - REACT_APP_ENABLE_LAZY_LOADING=${REACT_APP_ENABLE_LAZY_LOADING}
        - REACT_APP_ENABLE_VIRTUAL_SCROLLING=${REACT_APP_ENABLE_VIRTUAL_SCROLLING}
        - REACT_APP_IMAGE_OPTIMIZATION=${REACT_APP_IMAGE_OPTIMIZATION}
        - REACT_APP_ERROR_REPORTING=${REACT_APP_ERROR_REPORTING}
    container_name: ebook-frontend
    environment:
      # API Configuration
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:8000}
      REACT_APP_API_TIMEOUT: ${REACT_APP_API_TIMEOUT:-30000}
      REACT_APP_API_RETRIES: ${REACT_APP_API_RETRIES:-3}
      REACT_APP_API_RETRY_DELAY: ${REACT_APP_API_RETRY_DELAY:-1000}
      
      # Application Configuration
      REACT_APP_NAME: ${REACT_APP_NAME:-Liminal eBook Manager}
      REACT_APP_VERSION: ${REACT_APP_VERSION:-1.0.0}
      REACT_APP_DESCRIPTION: ${REACT_APP_DESCRIPTION:-A modern ebook management system}
      
      # Feature Flags
      REACT_APP_ENABLE_NOTIFICATIONS: ${REACT_APP_ENABLE_NOTIFICATIONS:-true}
      REACT_APP_ENABLE_OFFLINE_MODE: ${REACT_APP_ENABLE_OFFLINE_MODE:-false}
      REACT_APP_ENABLE_ANALYTICS: ${REACT_APP_ENABLE_ANALYTICS:-false}
      REACT_APP_ENABLE_DEBUG: ${REACT_APP_ENABLE_DEBUG:-false}
      REACT_APP_ENABLE_KEYBOARD_SHORTCUTS: ${REACT_APP_ENABLE_KEYBOARD_SHORTCUTS:-true}
      
      # UI Configuration
      REACT_APP_DEFAULT_THEME: ${REACT_APP_DEFAULT_THEME:-light}
      REACT_APP_ENABLE_SYSTEM_THEME: ${REACT_APP_ENABLE_SYSTEM_THEME:-true}
      REACT_APP_DEFAULT_PAGE_SIZE: ${REACT_APP_DEFAULT_PAGE_SIZE:-20}
      REACT_APP_MAX_PAGE_SIZE: ${REACT_APP_MAX_PAGE_SIZE:-100}
      REACT_APP_SEARCH_DEBOUNCE: ${REACT_APP_SEARCH_DEBOUNCE:-300}
      REACT_APP_MIN_QUERY_LENGTH: ${REACT_APP_MIN_QUERY_LENGTH:-2}
      REACT_APP_MAX_FILE_SIZE: ${REACT_APP_MAX_FILE_SIZE:-100MB}
      REACT_APP_ALLOWED_FILE_TYPES: ${REACT_APP_ALLOWED_FILE_TYPES:-.epub}
      REACT_APP_ENABLE_DRAG_DROP: ${REACT_APP_ENABLE_DRAG_DROP:-true}
      
      # Cache Configuration
      REACT_APP_CACHE_ENABLED: ${REACT_APP_CACHE_ENABLED:-true}
      REACT_APP_CACHE_TTL: ${REACT_APP_CACHE_TTL:-3600000}
      REACT_APP_CACHE_MAX_SIZE: ${REACT_APP_CACHE_MAX_SIZE:-100}
      
      # Performance Configuration
      REACT_APP_ENABLE_LAZY_LOADING: ${REACT_APP_ENABLE_LAZY_LOADING:-true}
      REACT_APP_ENABLE_VIRTUAL_SCROLLING: ${REACT_APP_ENABLE_VIRTUAL_SCROLLING:-false}
      REACT_APP_IMAGE_OPTIMIZATION: ${REACT_APP_IMAGE_OPTIMIZATION:-true}
      
      # Error Handling
      REACT_APP_ERROR_REPORTING: ${REACT_APP_ERROR_REPORTING:-false}
    networks:
      - ebook-network
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  ebook_storage:
    driver: local
  ebook_temp:
    driver: local

networks:
  ebook-network:
    driver: bridge